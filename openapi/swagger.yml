# swagger.yml

openapi: 3.0.0
info:
  title: "RP Flask REST API"
  description: "An API about people who might be authors and notes and shipments and books"
  version: "1.0.0"

# define root path
servers:
  - url: "/api"

# define endpoints
paths:
  /people:
    get:
      operationId: "src.svc.people.read_all"
      tags:
        - "People"
      summary: "Read the list of people"
      responses:
        "200":
          description: "Successfully read people list"
    post:
      operationId: "src.svc.people.create"
      tags:
        - People
      summary: "Create a person"
      # send requestBody to the server
      requestBody:
          description: "Person to create"
          required: True
          content:
            # data exchange format 
            application/json:
              schema:
                x-body-name: "person"
                $ref: "#/components/schemas/Person"
      responses:
        "201":
          description: "Successfully created person"

  /people/{lname}:
    get:
      # read_one() function in people.py
      operationId: "src.svc.people.read_one"
      tags:
        - People
      summary: "Read one person"
      parameters:
        - $ref: "#/components/parameters/lname"
      responses:
        "200":
          description: "Successfully read person"
    put:
      tags:
        - People
      operationId: "src.svc.people.update"
      summary: "Update a person"
      parameters:
        - $ref: "#/components/parameters/lname"
      responses:
        "200":
          description: "Successfully updated person"
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: "person"
              $ref: "#/components/schemas/Person"
    delete:
      tags:
        - People
      operationId: "src.svc.people.delete"
      summary: "Delete a person"
      parameters:
        - $ref: "#/components/parameters/lname"
      responses:
        "204":
          description: "Successfully deleted person"

  /notes:
    post:
      operationId: "src.svc.notes.create"
      tags:
        - Notes
      summary: "Create a note associated with a person"
      requestBody:
        description: "Note to create"
        required: True
        content:
          application/json:
            schema:
              x-body-name: "note"
              type: "object"
              properties:
                person_id:
                  type: "integer"
                content:
                  type: "string"
      responses:
        "201":
          description: "Successfully created a note"

  /notes/{note_id}:
    get:
      operationId: "src.svc.notes.read_one"
      tags:
        - Notes
      summary: "Read one note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "200":
          description: "Successfully read one note"
    put:
      tags:
        - Notes
      operationId: "src.svc.notes.update"
      summary: "Update a note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "200":
          description: "Successfully updated note"
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: "note"
              type: "object"
              properties:
                content:
                  type: "string"
    delete:
      tags:
        - Notes
      operationId: "src.svc.notes.delete"
      summary: "Delete a note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "204":
          description: "Successfully deleted note"

  /shipment/list:
    get:
      tags:
        - shipment
      summary: searches shipment
      operationId: src.svc.shipment.get
      description: |
        By passing in the appropriate options, you can search for
        available shipment in the system
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/shipmentItem'
        '400':
          description: bad input parameter
          
  /shipment/create:
    post:
      tags:
        - shipment
      summary: adds a shipment item
      operationId: src.svc.shipment.post
      description: Adds an item to the system
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/shipmentItem'
        description: shipment item to add
        
  /shipment/update/{id}:
    put:
      operationId: src.svc.shipment.put
      tags:
        - shipment
      summary: Update a Shipment in the people list
      description: Update a Shipment in the Shipments list
      parameters:
        - name: id
          in: path
          description: Shipment ID
          required: true
          schema:
            type: integer
            format: int64
            
      responses:
        200:
          description: Successfully updated a shipment in Shipments list


components:
  schemas:
    Person:
      type: "object"
      required:
      # dash in front of lname indicates that 
      # required can contain a list of properties
        - lname
      properties:
        fname:
          type: "string"
        lname:
          type: "string"
    shipmentItem:
      type: object

      properties:
        item:
          type: string
        description:
          type: string
        status:
          type: string
        tracking_number:
          type: string
        current_location: 
          type: string
        source:
          type: string
        destination":
          type: string
        arrival:
          type: string

  parameters:
    lname:
      name: "lname"
      description: "Last name of the person to get"
      in: path
      required: True
      schema:
        type: "string"
    note_id:
      name: "note_id"
      description: "ID of the note"
      in: path
      required: true
      schema:
        type: integer
